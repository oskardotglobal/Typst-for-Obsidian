import * as fs from "node:fs"; import * as path from "node:path";
import process from "node:process";
import builtins from "builtin-modules";
import esbuild from "esbuild";
import findCacheDir from "find-cache-dir";

const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = process.argv[2] === "production";

const inlineWorkerPlugin = {
    name: "inline-worker-plugin",
    setup(build) {
        build.onLoad({ filter: /\.(service|worker).(js|jsx|ts|tsx)$/ }, async ({ path: workerPath }) => {
            const workerCode = await buildWorker(workerPath);
            return {
                contents: `
                export default function inlineWorker() {
                    let blob = new Blob([${JSON.stringify(workerCode)}])
                    let url = URL.createObjectURL(blob)
                    let worker = ${
                        workerPath.includes("service")
                            ? "navigator.serviceWorker.register(url, {scope: '/'})"
                            : "new Worker(url)"
                    };
                    URL.revokeObjectURL(url)
                    return worker
                }`,
                loader: "js",
            };
        });
    },
};

const wasmPlugin = {
    name: "wasm",
    setup(build) {
        // Resolve ".wasm" files to a path with a namespace
        build.onResolve({ filter: /\.wasm$/ }, (args) => {
            if (args.resolveDir === "") {
                return; // Ignore unresolvable paths
            }
            return {
                path: path.isAbsolute(args.path) ? args.path : path.join(args.resolveDir, args.path),
                namespace: "wasm-binary",
            };
        });
        // Virtual modules in the "wasm-binary" namespace contain the
        // actual bytes of the WebAssembly file. This uses esbuild's
        // built-in "binary" loader instead of manually embedding the
        // binary data inside JavaScript code ourselves.
        build.onLoad({ filter: /.*/, namespace: "wasm-binary" }, async (args) => ({
            contents: await fs.promises.readFile(args.path),
            loader: "binary",
        }));
    },
};

const cacheDir = findCacheDir({
    name: "inline-sevice-worker",
    create: true,
});

async function buildWorker(workerPath) {
    const scriptNameParts = path.basename(workerPath).split(".");
    scriptNameParts.pop();
    scriptNameParts.push("js");
    const scriptName = scriptNameParts.join(".");
    const bundlePath = path.resolve(cacheDir, scriptName);

    await esbuild.build({
        entryPoints: [workerPath],
        bundle: true,
        minify: true,
        outfile: bundlePath,
        target: "es2018",
        format: "cjs",
    });

    return fs.promises.readFile(bundlePath, { encoding: "utf-8" });
}

const context = await esbuild.context({
    banner: {
        js: banner,
    },
    entryPoints: ["src/main.ts"],
    bundle: true,
    external: [
        "obsidian",
        "electron",
        "pdfjs-dist/build/pdf.worker.min.mjs",
        "@codemirror/autocomplete",
        "@codemirror/collab",
        "@codemirror/commands",
        "@codemirror/language",
        "@codemirror/lint",
        "@codemirror/search",
        "@codemirror/state",
        "@codemirror/view",
        "@lezer/common",
        "@lezer/highlight",
        "@lezer/lr",
        "@babel/runtime/helpers/extends",
        "images/*.svg",
        "images/*.gif",
        ...builtins,
    ],
    loader: {
        ".svg": "empty",
        ".gif": "empty",
    },
    format: "cjs",
    target: "es2018",
    logLevel: "info",
    sourcemap: prod ? false : "inline",
    treeShaking: true,
    outfile: "main.js",
    define: {
        PLUGIN_VERSION: JSON.stringify(process.env.npm_package_version),
    },
    plugins: [inlineWorkerPlugin, wasmPlugin],
});

if (prod) {
    await context.rebuild();
    process.exit(0);
} else {
    await context.watch();
}
